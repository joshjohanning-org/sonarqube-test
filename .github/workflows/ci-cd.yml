
name: CICD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: write
  pull-requests: write 
  packages: write
  actions: write
  checks: write
  security-events: write
  issues: write
  deployments: write
  pages: write
  repository-projects: write
  discussions: write
  statuses: write

# Use github.event.repository.id to have a unique value per repo to avoid conflicts of multiple
# repositories deploying this sample. It's kind of hackish, but works for sample purposes and 
# avoids manual replacements by users. Under normal circumstances, you would use a constant.
env:
  # SONAR_HOST_URL: https://joshjohanning-org-sonarqube-test-5xgpv494cv6gq-9000.githubpreview.dev
  SONAR_PROJECT_KEY: github-sonarqube-test
  artifactsName: artifacts

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '8'
        cache: 'maven'

    - name: Build with Maven
      run: mvn -B package cobertura:cobertura --file pom.xml -DskipITs --batch-mode --quiet

    - name: Publish Unit Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always() && github.actor != 'dependabot[bot]'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        check_name: Tests Results
        files: '**/surefire-reports/TEST-*.xml'
        report_individual_runs: true
        deduplicate_classes_by_file_name: false

    - name: cobertura-report
      uses: 5monkeys/cobertura-action@master
      if: always() && github.actor != 'dependabot[bot]'
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        path: '**/coverage.xml'
        minimum_coverage: 5

    - uses: sonarsource/sonarqube-scan-action@master
      continue-on-error: true
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    # If you wish to fail your job when the Quality Gate is red, uncomment the
    # following lines. This would typically be used to fail a deployment.
    # - uses: sonarsource/sonarqube-quality-gate-action@master
    #   timeout-minutes: 5
    #   env:
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - uses: LouisBrunner/checks-action@v1.6.2
      if: always()
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        name: SonarQube Link
        conclusion: ${{ job.status }}
        output: |
          {"summary":"${{ secrets.SONAR_HOST_URL}}/dashboard?id=${{ env.SONAR_PROJECT_KEY }}"}

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v3
      with:
        path: |
            **/target/*.war 
            *.sql 
            IaC/**/*.*
        name: ${{ env.artifactsName }}

